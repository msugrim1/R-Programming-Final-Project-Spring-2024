my_sf <- st_as_sf(df_coord, coords = c('longitude', 'latitude'))
my_sf <- st_set_crs(my_sf, crs = 4326)
ggplot(my_sf) +
geom_sf(aes(color = cluster))
install.packages("sf")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(my_sf) +
geom_sf(aes(color = cluster))
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
#Mapping Fnt
mapfunc <- function(data,x,y)
{
my_sf <- st_as_sf(data, coords = c(x,y))
my_sf <- st_set_crs(my_sf, crs = 4326)
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
}
mapfunc(df_coord, latitude, longitude)
library(sf)
library(ggplot2)
#Mapping Fnt
mapfunc <- function(data,x,y)
{
my_sf <- st_as_sf(data, coords = c(x,y))
my_sf <- st_set_crs(my_sf, crs = 4326)
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
}
#Basic Calculations
addition <- function(x,y)
{
result <- x + y
print("Result: ")
print(result)
}
subtraction <- function(x,y)
{
result <- y - x
print("Result: ")
print(result)
}
multiplication <- function(x,y)
{
result <- x * y
print("Result: ")
print(result)
}
division <- function(x,y)
{
result <- x / y
print("Result: ")
print(result)
}
#Test Data
data <- read.csv("C:/Users/mos01/Downloads/R-Programming-msugrim-Final_Project/School_Neighborhood_Poverty_Estimates_Current.csv")
data
df_coord <- data.frame(name = data$School.Name, latitude = data$LAT, longitude = data$LON)
df_coord
mapfunc(df_coord, latitude, longitude)
#Mapping Fnt
mapfunc <- function(data)
{
my_sf <- st_as_sf(data, coords = c('x','y'))
my_sf <- st_set_crs(my_sf, crs = 4326)
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
}
#Basic Calculations
addition <- function(x,y)
{
result <- x + y
print("Result: ")
print(result)
}
subtraction <- function(x,y)
{
result <- y - x
print("Result: ")
print(result)
}
multiplication <- function(x,y)
{
result <- x * y
print("Result: ")
print(result)
}
division <- function(x,y)
{
result <- x / y
print("Result: ")
print(result)
}
#Test Data
data <- read.csv("C:/Users/mos01/Downloads/R-Programming-msugrim-Final_Project/School_Neighborhood_Poverty_Estimates_Current.csv")
data
df_coord <- data.frame(name = data$School.Name, latitude = data$LAT, longitude = data$LON)
df_coord
mapfunc(df_coord)
#Mapping Fnt
mapfunc <- function(data)
{
my_sf <- st_as_sf(data, coords = c('latitude','longitude'))
my_sf <- st_set_crs(my_sf, crs = 4326)
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
}
#Test Data
data <- read.csv("C:/Users/mos01/Downloads/R-Programming-msugrim-Final_Project/School_Neighborhood_Poverty_Estimates_Current.csv")
data
df_coord <- data.frame(name = data$School.Name, latitude = data$LAT, longitude = data$LON)
df_coord
mapfunc(df_coord)
my_sf <- st_as_sf(data, coords = c('latitude','longitude'))
my_sf <- st_set_crs(my_sf, crs = 4326)
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
mapfunc(df_coord)
#Mapping Fnt
mapfunc <- function(data)
{
my_sf <- st_as_sf(data, coords = c('latitude','longitude'))
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
}
mapfunc(df_coord)
#Mapping Fnt
mapfunc <- function(data)
{
my_sf <- st_as_sf(data, coords = c('longitude','latitude'))
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
}
mapfunc(df_coord)
#Test Calculation Fnts
df_est <- data.frame(data$School.Name, data$Income.to.poverty.Ratio..Estimate)
df_est
#Test Calculation Fnts
df_est <- data.frame(name = data$School.Name, esitmate = data$Income.to.poverty.Ratio..Estimate)
df_est
addition(259, 261)
subtraction(250, 169)
result <- x - y
print("Result: ")
print(result)
subtraction <- function(x,y)
{
result <- x - y
print("Result: ")
print(result)
}
subtraction <- function(x,y)
{
result <- x - y
print("Result: ")
print(result)
}
addition(259, 261)
subtraction(250, 169)
multiplication(239, 255)
division(370, 319)
LM <- function(data, x, y)
{
lm(x ~ y, data)
}
#Linear Regression Fnt
LM <- function(data, x, y)
{
lm(x ~ y, data)
}
#Test Linear Regression
df_main <- data.frame(name = data$School.Name, esitmate = data$Income.to.poverty.Ratio..Estimate, error = data$Income.to.poverty.Ratio..Standard.Error)
df_main
estimate <- data$Income.to.poverty.Ratio..Estimate
error <- data$Income.to.poverty.Ratio..Standard.Error
LM(df_main, estimate, error)
#Linear Regression Fnt
LM <- function(data, x, y)
{
lm(x ~ y, data)
summary(data)
}
#Linear Regression Fnt
LM <- function(data, x, y)
{
lm(x ~ y, data)
summary(data)
}
LM(df_main, estimate, error)
#Test Map Fnt
df_coord <- data.frame(name = data$School.Name, latitude = data$LAT, longitude = data$LON)
df_coord
mapfunc(df_coord)
#Test Linear Regression
df_main <- data.frame(name = data$School.Name, esitmate = data$Income.to.poverty.Ratio..Estimate, error = data$Income.to.poverty.Ratio..Standard.Error)
estimate <- data$Income.to.poverty.Ratio..Estimate
error <- data$Income.to.poverty.Ratio..Standard.Error
df_main
LM(df_main, estimate, error)
lm(x ~ y, data)
summary(data)
#Linear Regression Fnt
LM <- function(data, x, y)
{
lm(x ~ y, data)
summary(data)
}
LM(df_main, estimate, error)
LM(df_main, estimate, error)
#Mapping Fnt
mapfunc <- function(data)
{
my_sf <- st_as_sf(data, coords = c('longitude','latitude'))
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
}
#Linear Regression Fnt
LM <- function(data, x, y)
{
lm(x ~ y, data)
}
#Basic Calculations
addition <- function(x,y)
{
result <- x + y
print("Result: ")
print(result)
}
subtraction <- function(x,y)
{
result <- x - y
print("Result: ")
print(result)
}
multiplication <- function(x,y)
{
result <- x * y
print("Result: ")
print(result)
}
division <- function(x,y)
{
result <- x / y
print("Result: ")
print(result)
}
#Test Data
data <- read.csv("C:/Users/mos01/Downloads/R-Programming-msugrim-Final_Project/School_Neighborhood_Poverty_Estimates_Current.csv")
data
#Test Calculation Fnts
df_est <- data.frame(name = data$School.Name, esitmate = data$Income.to.poverty.Ratio..Estimate)
df_est
addition(259, 261)
subtraction(250, 169)
multiplication(239, 255)
division(370, 319)
#Test Linear Regression
df_main <- data.frame(name = data$School.Name, esitmate = data$Income.to.poverty.Ratio..Estimate, error = data$Income.to.poverty.Ratio..Standard.Error)
estimate <- data$Income.to.poverty.Ratio..Estimate
error <- data$Income.to.poverty.Ratio..Standard.Error
df_main
LM(df_main, estimate, error)
SVM <- function(data, x)
{
cutoff <- createDataPartition(data$x, p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
#SVM Fnt
SVM <- function(data, x)
{
cutoff <- createDataPartition(data$x, p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
#Test SVM Fnt
SVM(df_main, estimate)
#' @title svmCalc
#' @description Performs linear regression  and SVM of
#' estimates and standard error
#' @name mappingCalc
#' @param x cutoff
#' @param data Data being used
install.packages("caret")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("GGally")
install.packages("psych")
install.packages("ggpubr")
install.packages("reshape")
library(caret)
library(ggplot2)
library(GGally)
library(psych)
library(ggpubr)
library(reshape)
SVM <- function(data, x)
{
cutoff <- createDataPartition(data$x, p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
install.packages("sf")
install.packages("sf")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("caret")
install.packages("caret")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("GGally")
install.packages("GGally")
install.packages("psych")
install.packages("psych")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("reshape")
install.packages("reshape")
library(caret)
library(ggplot2)
library(GGally)
library(psych)
library(ggpubr)
library(reshape)
library(sf)
library(ggplot2)
#Mapping Fnt
mapfunc <- function(data)
{
my_sf <- st_as_sf(data, coords = c('longitude','latitude'))
ggplot(my_sf) +
geom_sf(aes(color = "cluster"))
}
#Linear Regression Fnt
LM <- function(data, x, y)
{
lm(x ~ y, data)
}
#SVM Fnt
SVM <- function(data, x)
{
cutoff <- createDataPartition(data$x, p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
#Basic Calculations
addition <- function(x,y)
{
result <- x + y
print("Result: ")
print(result)
}
subtraction <- function(x,y)
{
result <- x - y
print("Result: ")
print(result)
}
multiplication <- function(x,y)
{
result <- x * y
print("Result: ")
print(result)
}
division <- function(x,y)
{
result <- x / y
print("Result: ")
print(result)
}
#Test Data
data <- read.csv("C:/Users/mos01/Downloads/R-Programming-msugrim-Final_Project/School_Neighborhood_Poverty_Estimates_Current.csv")
#Test SVM Fnt
SVM(df_main, estimate)
#SVM Fnt
SVM <- function(data, x)
{
cutoff <- caret::createDataPartition(data$x, p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
#Test SVM Fnt
SVM(df_main, estimate)
SVM <- function(data, x)
{
cutoff <- caret::createDataPartition(data$x, p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
#Test SVM Fnt
SVM(df_main, estimate)
#SVM Fnt
SVM <- function(data, x, y)
{
cutoff <- caret::createDataPartition(data$x, data$y, p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
#Test SVM Fnt
SVM(df_main, estimate, error)
#SVM Fnt
SVM <- function(data, x)
{
cutoff <- caret::createDataPartition(data$x, p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
#Test SVM Fnt
SVM(df_main, estimate)
cutoff <- caret::createDataPartition(y = data$x, p=0.85, list=FALSE)
#SVM Fnt
SVM <- function(data, x)
{
cutoff <- caret::createDataPartition(y = data$x, p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
#Test SVM Fnt
SVM(df_main, estimate)
#SVM Fnt
SVM <- function(data, x)
{
cutoff <- caret::createDataPartition(data[1], p=0.85, list=FALSE)
testdf <- data[-cutoff,]
traindf <- df[cutoff,]
set.seed(1234)
control <- trainControl(method="cv",number=10, classProbs = TRUE)
metric <- "Accuracy"
model <- train(x ~., data = traindf, method = "svmRadial",
tuneLength = 8,preProc = c("center","scale"),
metric=metric, trControl=control)
model
plot(model)
}
#Test SVM Fnt
SVM(df_main, estimate)
